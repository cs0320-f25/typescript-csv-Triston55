Reflection Task

1. Correctness
I would argue that a CSV parser is correct if it can properly transform any input CSV file and effectively transform and transport each datapoint into a data structure. Furthermore, the parser should ideally be able to validate data so that it conforms with a certain desired structure and style so that the caller may be able to work with that data with greater ease and applicability. For example, in this assignment we saw that it might be a good idea to store data in terms of an array of dictionaries, this way we can explicitly access name and age fields using keys for each entry. Furthermore, a good parser needs to be able to handle edge cases in which the data does not fit the desired style or defined schema to ideally coerce that data to fit. 

2. Random, On-Demand Generation
If this was the case, this reframes my testing from a standpoint of "what bugs do I foresee happening" and to a new broader standpoint of "what are all the possible issues that could come up with my CSV parser." I would then need to go in to my parser and put in a ton of new case handlings and restrictions to the type of data that comes in. This would make my parser and my tests much more comprehensive, making the parser a more effective and reliable one. 

3. Overall experience, Bugs encountered and resolved
This sprint was much more engaging and interactive than most programming assignments I have done. I appreciated the amount of exploration and reflection that was encouraged in the assignment, as well as the open collaboration, LLM and resource policy. This enabled me to use the resources which are available in our world today to learn as I completed the assignment. Many of the encountered bugs were related to environment and directory issues, and I was able to use Copilot effectively to navigate these issues. For instance, I was able to see why my run-parser.ts was not running due to directory issues, and it gave me the import statements to run my basic-parser.test.ts. In task 3, I ran into some issues building the CSV parser. I was able to refer to our handout to realize the properties associated with ZOD neccessary for this assignment. I was then able to work with Copilot in debugging the fact that my result needs to be either a NewPerson Schema or a string, and that my function promises either to be returned. Furthermore, I was having trouble correctly returning the NewPerson validated data in the parser (a dictionary of name: and age:), and Copilot was able to suggest that I push validated_person.data, the successfully parsed datapoints in terms of the NewPersonSchema form. 